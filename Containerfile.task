# Konflux does not only support running builds in containers locally but also supports running builds
# in remote VMs with the multi-platform controller. In order to simplify the specification of build
# targets, however, we are adding support for the multi-platform controller to also be able to build
# in-cluseter with the tasks focused on building remotely. Therefore, we need to maintain a buildah image
# for our tasks that has more than _just_ buildah in it. We also need to add the required functionality
# for the remote builds.

FROM registry.fedoraproject.org/fedora-minimal:41 AS dockerfile-json-builder

ARG BUILDER_RPMS="golang"
RUN microdnf install -y $BUILDER_RPMS

ENV GOPROXY='https://proxy.golang.org,direct'
ENV GOSUMDB='sum.golang.org'

WORKDIR /app
COPY dockerfile-json .
RUN go build -o dockerfile-json

FROM quay.io/redhat-user-workloads/rhtap-build-tenant/buildah-container/buildah@sha256:ecded8c8a25805b0d5386687dd48a6fa60ea033bbc42373a11e566aa7ca147b7

LABEL \
    org.opencontainers.image.url="https://quay.io/konflux-ci/buildah-task" \
    org.label-schema.name="buildah-task" \
    org.opencontainers.image.title="buildah-task" \
    name="konflux-buildah-task" \
    com.redhat.component="konflux-buildah-task" \
    io.k8s.display-name="konflux-buildah-task" \
    io.openshift.tags="buildah tekton" \
    summary="Command line tool to create and work with containers within Tekton tasks." \
    description="Command line tool to create and work with containers. This is a repackaged version for use within Tekton tasks in Konflux CI. It includes additional functionality on top of buildah that might be required for the tasks." \
    io.k8s.description="Command line tool to create and work with containers. This is a repackaged version for use within Tekton tasks in Konflux CI. It includes additional functionality on top of buildah that might be required for the tasks."

ARG INSTALL_RPMS="rsync openssh-clients kubernetes-client jq iproute subscription-manager"
RUN microdnf install -y $INSTALL_RPMS && \
    microdnf -y clean all && \
    rm -rf /var/cache /var/log/dnf* /var/log/yum.*
COPY --from=dockerfile-json-builder /app/dockerfile-json /usr/bin
COPY scripts/icm-injection-scripts/inject-icm.sh /usr/bin/inject-icm-to-containerfile
